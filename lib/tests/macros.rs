// Copyright 2018 Lyndon Brown
//
// This file is part of the `gong` command-line argument parsing library.
//
// Licensed under the MIT license or the Apache license (version 2.0), at your option. You may not
// copy, modify, or distribute this file except in compliance with said license. You can find copies
// of these licenses either in the LICENSE-MIT and LICENSE-APACHE files, or alternatively at
// <http://opensource.org/licenses/MIT> and <http://www.apache.org/licenses/LICENSE-2.0>
// respectively.

extern crate gong;

#[allow(unused_macros)]
#[allow(dead_code)] //Mod shared across test crates
mod common;

use gong::{longopt, shortopt};
use gong::options::*;

/// Tests of ‚Äúavailable options set‚Äù construction macros
mod available_options {
    use super::*;

    /// Compare the two option set building macros
    #[test]
    fn cmp_non_fixed() {
        // The common base set is already constructed with the ‚Äúfixed‚Äù (`OptionSet` based) macro
        let fixed: &OptionSet = common::get_base_opts();

        // Re-build with ‚Äúnon-fixed‚Äù (`OptionSetEx` based) macro
        let non_fixed = OptionSetEx {
            long: vec![
                longopt!(@flag "help"),
                longopt!(@flag "foo"),
                longopt!(@flag "version"),
                longopt!(@flag "foobar"),
                longopt!(@data "hah"),
                longopt!(@flag "aÃÅbc"),
                longopt!(@data "∆í∆í"),
                longopt!(@flag "∆ío"),
                longopt!(@opt_data "delay"),
                longopt!(@opt_data "«ù∆É"),
                longopt!(@flag "color"),
                longopt!(@flag "no-color"),
            ],
            short: vec![
                shortopt!(@flag 'h'),
                shortopt!(@flag 'v'),
                shortopt!(@flag '‚ù§'),
                shortopt!(@flag 'x'),
                shortopt!(@data 'o'),
                shortopt!(@flag '\u{030a}'),
                shortopt!(@data '∆ê'),
                shortopt!(@flag 'C'),
                shortopt!(@opt_data 'üíß'),
                shortopt!(@opt_data 'p'),
            ]
        };
        assert_eq!(*fixed, non_fixed);
    }

    /// Compare macro-built with hand-built ‚Äúavailable options‚Äù set
    #[test]
    fn cmp_hand_built() {
        // The common base set is already constructed with a macro
        let macro_built = common::get_base_opts();

        // Re-build it by hand for comparison
        let hand_built = OptionSet {
            long: &[
                LongOption { name: "help", opt_type: OptionType::Flag },
                LongOption { name: "foo", opt_type: OptionType::Flag },
                LongOption { name: "version", opt_type: OptionType::Flag },
                LongOption { name: "foobar", opt_type: OptionType::Flag },
                LongOption { name: "hah", opt_type: OptionType::Data },
                LongOption { name: "aÃÅbc", opt_type: OptionType::Flag },
                LongOption { name: "∆í∆í", opt_type: OptionType::Data },
                LongOption { name: "∆ío", opt_type: OptionType::Flag },
                LongOption { name: "delay", opt_type: OptionType::OptionalData },
                LongOption { name: "«ù∆É", opt_type: OptionType::OptionalData },
                LongOption { name: "color", opt_type: OptionType::Flag },
                LongOption { name: "no-color", opt_type: OptionType::Flag },
            ],
            short: &[
                ShortOption { ch: 'h', opt_type: OptionType::Flag },
                ShortOption { ch: 'v', opt_type: OptionType::Flag },
                ShortOption { ch: '‚ù§', opt_type: OptionType::Flag },
                ShortOption { ch: 'x', opt_type: OptionType::Flag },
                ShortOption { ch: 'o', opt_type: OptionType::Data },
                ShortOption { ch: '\u{030A}', opt_type: OptionType::Flag },
                ShortOption { ch: '∆ê', opt_type: OptionType::Data },
                ShortOption { ch: 'C', opt_type: OptionType::Flag },
                ShortOption { ch: 'üíß', opt_type: OptionType::OptionalData },
                ShortOption { ch: 'p', opt_type: OptionType::OptionalData },
            ]
        };

        assert_eq!(*macro_built, hand_built);
    }

    /// Compare macro-built with method-built ‚Äúavailable options‚Äù set
    #[test]
    fn cmp_method_built() {
        // The common base set is already constructed with a macro
        let macro_built = common::get_base_opts();

        // Re-build it with methods for comparison
        let mut method_built = OptionSetEx::with_capacity(6, 5);
        method_built
            .add_long("help")
            .add_short('h')
            .add_short('v')
            .add_long("foo")
            .add_long("version")
            .add_long("foobar")
            .add_long_data("hah")
            .add_long("aÃÅbc")
            .add_short('‚ù§')
            .add_short('x')
            .add_short_data('o')
            .add_short('\u{030A}')
            .add_long_data("∆í∆í")
            .add_long("∆ío")
            .add_short_data('∆ê')
            .add_long_data_optional("delay")
            .add_long_data_optional("«ù∆É")
            .add_long("color")
            .add_long("no-color")
            .add_short('C')
            .add_short_data_optional('üíß')
            .add_short_data_optional('p');

        assert_eq!(*macro_built, method_built);
    }
}
